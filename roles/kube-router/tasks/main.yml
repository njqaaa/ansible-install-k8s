- block:
    - name: 在deploy 节点创建相关目录
      file: name={{ K8S_YAML_DIR }}/kube-router state=directory

    - name: 准备配置 kube-router DaemonSet (without IPVS)
      template: src=kuberouter.yaml.j2 dest={{ K8S_YAML_DIR }}/kube-router/kuberouter.yaml
      when: 'SERVICE_PROXY != "true"'
        
    - name: 准备配置 kube-router DaemonSet (with IPVS)
      template: src=kuberouter-all.yaml.j2 dest={{ K8S_YAML_DIR }}/kube-router/kuberouter.yaml
      when: 'SERVICE_PROXY == "true"'
  delegate_to: "{{ groups.deploy[0] }}"
  run_once: true
    
- name: 检查是否已下载离线kube-router镜像
  command: "ls {{ BASE_DIR }}/down"
  register: download_info
  connection: local
  run_once: true

- name: 创建cni 和kube-router 相关目录
  file: name={{ item }} state=directory
  with_items:
  - "{{ CNI_NET_DIR }}"

- name: 下载cni plugins
  copy: src={{ BASE_CNI_DIR }}/{{ item }} dest={{ BIN_DIR }}/{{ item }} mode=0755
  with_items:
  - bridge
  - host-local
  - loopback
  - portmap

# kube-router 带service proxy (IPVS/LVS)
- name: 停止 kube-proxy 服务
  service: name=kube-proxy state=stopped enabled=no 
  when: 'SERVICE_PROXY == "true"'
  ignore_errors: true

- name: 清理 kube-proxy产生的iptables或ipvs规则
  shell: "{{ BIN_DIR }}/kube-proxy --cleanup; ipvsadm -C"
  when: 'SERVICE_PROXY == "true"'
  ignore_errors: true

# 只需单节点执行一次
- name: 运行 kube-router DaemonSet
  shell: "{{ BIN_DIR }}/kubectl apply -f {{ K8S_YAML_DIR }}/kube-router/ && sleep 5"
  delegate_to: "{{ groups.deploy[0] }}"
  run_once: true

# 删除原有cni配置
- name: 删除默认cni配置 
  file: path={{ CNI_NET_DIR }}/10-default.conf state=absent

# 等待网络插件部署成功，视下载镜像速度而定
- name: 轮询等待kube-router 运行，视下载镜像速度而定
  shell: "{{ BIN_DIR }}/kubectl get pod -n kube-system -o wide|grep 'kube-router'|grep ' {{ inventory_hostname }} '|awk '{print $3}'"
  register: pod_status
  until: pod_status.stdout == "Running"
  delegate_to: "{{ groups.deploy[0] }}"
  retries: 15
  delay: 8

