- block:
    - name: 在deploy 节点创建相关目录
      file: name={{ item }} state=directory
      with_items:
      - "{{ CALICO_CA_DIR }}"
      - "{{ K8S_YAML_DIR }}/calico"

    - name: 创建calico 证书请求
      template: src=calico-csr.json.j2 dest={{ CALICO_CA_DIR }}/calico-csr.json
    
    - name: 创建 calico证书和私钥
      shell: "cd {{ CALICO_CA_DIR }} && {{ BASE_CFSSL_DIR }}/cfssl gencert \
            -ca={{ CA_DIR }}/ca.pem \
            -ca-key={{ CA_DIR }}/ca-key.pem \
            -config={{ CA_DIR }}/ca-config.json \
            -profile=kubernetes calico-csr.json | {{ BASE_CFSSL_DIR }}/cfssljson -bare calico"
    
    - name: get calico-etcd-secrets info
      shell: "{{ BASE_K8S_DIR }}/kubectl get secrets -n kube-system"
      register: secrets_info
    
    - name: 创建 calico-etcd-secrets
      shell: "cd {{ CALICO_CA_DIR }} && \
            {{ BASE_K8S_DIR }}/kubectl create secret generic -n kube-system calico-etcd-secrets \
            --from-file=etcd-ca={{ CA_DIR }}/ca.pem \
            --from-file=etcd-key=calico-key.pem \
            --from-file=etcd-cert=calico.pem"
      when: '"calico-etcd-secrets" not in secrets_info.stdout'
    
    - name: 配置 calico DaemonSet yaml文件
      template: src=calico-{{ calico_ver }}.yaml.j2 dest={{ K8S_YAML_DIR }}/calico/calico.yaml
    
    - name: 配置 calico rbac
      template: src=calico-rbac.yaml.j2 dest={{ K8S_YAML_DIR }}/calico/calico-rbac.yaml
  delegate_to: "{{ groups.deploy[0] }}"
  run_once: true
    
- name: node 节点创建calico 相关目录
  file: name={{ item }} state=directory
  with_items:
  - "{{ CALICO_CA_DIR }}"
  - "{{ CNI_NET_DIR }}"

# 只需单节点执行一次
- name: 运行 calico网络
  shell: "{{ BASE_K8S_DIR }}/kubectl apply -f {{ K8S_YAML_DIR }}/calico/ && sleep 5"
  delegate_to: "{{ groups.deploy[0] }}"
  run_once: true

# 删除原有cni配置
- name: 删除默认cni配置
  file: path={{ CNI_NET_DIR }}/10-default.conf state=absent

# [可选]cni calico plugins 已经在calico.yaml完成自动安装
- name: 下载calicoctl 客户端
  copy: src={{ BASE_CNI_DIR }}/{{ item }} dest={{ BIN_DIR }}/{{ item }} mode=0755
  with_items:
  - calico
  - calico-ipam
  - calicoctl
  - loopback

- name: 分发 calico 证书
  synchronize: src={{ CALICO_CA_DIR }}/{{ item }} dest={{ CALICO_CA_DIR }}/{{ item }}
  with_items:
  - calico.pem
  - calico-key.pem
  delegate_to: "{{ groups.deploy[0] }}"

- name: 准备 calicoctl配置文件
  template: src=calicoctl.cfg.j2 dest=/etc/calico/calicoctl.cfg

# 等待网络插件部署成功，视下载镜像速度而定
- name: 轮询等待calico-node 运行，视下载镜像速度而定
  shell: "{{ BASE_K8S_DIR }}/kubectl get pod -n kube-system -o wide|grep 'calico-node'|grep ' {{ inventory_hostname }} '|awk '{print $3}'"
  register: pod_status
  until: pod_status.stdout == "Running"
  delegate_to: "{{ groups.deploy[0] }}"
  retries: 15
  delay: 15
