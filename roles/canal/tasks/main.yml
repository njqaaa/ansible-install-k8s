- block:
    - name: 在deploy 节点创建相关目录
      file: name={{ item }} state=directory
      with_items:
      - "{{ CALICO_CA_DIR }}"
    
    - name: 配置 calico DaemonSet yaml文件
      template: src=canal.yaml.j2 dest=/tmp/canal.yaml
    
  delegate_to: "{{ groups.deploy[0] }}"
  run_once: true
    
- name: node 节点创建canal 相关目录
  file: name={{ item }} state=directory
  with_items:
  - "{{ CALICO_CA_DIR }}"
  - "{{ CNI_NET_DIR }}"

# 只需单节点执行一次
- name: 运行 canal网络
  shell: "{{ BASE_K8S_DIR }}/kubectl apply -f /tmp/canal.yaml && sleep 5"
  delegate_to: "{{ groups.deploy[0] }}"
  run_once: true

# 删除原有cni配置
- name: 删除默认cni配置
  file: path={{ CNI_NET_DIR }}/10-default.conf state=absent

# [可选]cni calico plugins 已经在calico.yaml完成自动安装
- name: 下载calicoctl 客户端
  copy: src={{ BASE_CNI_DIR }}/{{ item }} dest={{ BIN_DIR }}/{{ item }} mode=0755
  with_items:
  - calico
  - calico-ipam
  - calicoctl
  - loopback
  - portmap

#- name: 分发 calico 证书
#  synchronize: src={{ CALICO_CA_DIR }}/{{ item }} dest={{ CALICO_CA_DIR }}/{{ item }}
#  with_items:
#  - calico.pem
#  - calico-key.pem
#  delegate_to: "{{ groups.deploy[0] }}"
#
# 等待网络插件部署成功，视下载镜像速度而定
- name: 轮询等待canal 运行，视下载镜像速度而定
  shell: "{{ BASE_K8S_DIR }}/kubectl get pod -n kube-system -o wide|grep 'canal'|grep ' {{ inventory_hostname }} '|awk '{print $3}'"
  register: pod_status
  until: pod_status.stdout == "Running"
  delegate_to: "{{ groups.deploy[0] }}"
  retries: 15
  delay: 15
